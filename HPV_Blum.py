from requests import post, get
from threading import Thread, Lock
from os import system as sys
from platform import system as s_name
from time import sleep
from random import randint
from colorama import Fore
from typing import Literal
from datetime import datetime, timedelta
from urllib.parse import unquote
from itertools import cycle

from Core.Tools.HPV_Getting_File_Paths import HPV_Get_Accounts
from Core.Tools.HPV_User_Agent import HPV_User_Agent
from Core.Tools.HPV_Proxy import HPV_Proxy_Checker

from Core.Config.HPV_Config import *







class HPV_Blum:
    '''
    AutoBot Ferma /// HPV
    ---------------------
    [1] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã`
    
    [2] - `–°–±–æ—Ä –º–æ–Ω–µ—Ç`
    
    [3] - `–ó–∞–ø—É—Å–∫ —Ñ–∞—Ä–º–∞ –º–æ–Ω–µ—Ç`
    
    [4] - `–°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`
    
    [5] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –∏ –∑–∞–ø—É—Å–∫ –∏—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è`
    
    [6] - `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π`
    
    [7] - `–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 8 –¥–æ 9 —á–∞—Å–æ–≤`
    
    [8] - `–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ 8-9 —á–∞—Å–æ–≤`
    '''



    def __init__(self, Name: str, URL: str, Proxy: dict) -> None:
        self.Name = Name                     # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.URL = self.URL_Clean(URL)       # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ mini app
        self.Proxy = Proxy                   # –ü—Ä–æ–∫—Å–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
        self.UA = HPV_User_Agent()           # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ User Agent
        self.Token = self.Authentication()   # –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞



    def URL_Clean(self, URL: str) -> str:
        '''–û—á–∏—Å—Ç–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'''

        try:
            return unquote(URL.split('#tgWebAppData=')[1].split('&tgWebAppVersion')[0])
        except:
            return ''



    def Current_Time(self) -> str:
        '''–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è'''

        return Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'



    def Logging(self, Type: Literal['Success', 'Warning', 'Error'], Name: str, Smile: str, Text: str) -> None:
        '''–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''

        with Console_Lock:
            COLOR = Fore.GREEN if Type == 'Success' else Fore.YELLOW if Type == 'Warning' else Fore.RED # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            DIVIDER = Fore.BLACK + ' | '   # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            Time = self.Current_Time()     # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            Name = Fore.MAGENTA + Name     # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
            Smile = COLOR + str(Smile)     # –°–º–∞–π–ª–∏–∫
            Text = COLOR + Text            # –¢–µ–∫—Å—Ç –ª–æ–≥–∞

            print(Time + DIVIDER + Smile + DIVIDER + Text + DIVIDER + Name)



    def Authentication(self) -> str:
        '''–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''

        URL = 'https://gateway.blum.codes/v1/auth/provider/PROVIDER_TELEGRAM_MINI_APP'
        Headers = {'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'Accept': 'application/json, text/plain, */*', 'Content-Type': 'application/json', 'sec-ch-ua-mobile': '?1', 'User-Agent': self.UA, 'sec-ch-ua-platform': '"Android"', 'Origin': 'https://telegram.blum.codes', 'x-requested-with': 'org.telegram.plus', 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'}
        Json = {'query': self.URL}

        try:
            Token = post(URL, headers=Headers, json=Json, proxies=self.Proxy).json()['token']['access']
            self.Logging('Success', self.Name, 'üü¢', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
            return Token
        except:
            self.Logging('Error', self.Name, 'üî¥', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!')
            return ''



    def ReAuthentication(self) -> None:
        '''–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''

        self.Token = self.Authentication()



    def Get_Info(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∏ –Ω–∞–ª–∏—á–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä'''

        URL = 'https://game-domain.blum.codes/api/v1/user/balance'
        Headers = {'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'accept': 'application/json, text/plain, */*', 'sec-ch-ua-mobile': '?1', 'authorization': f'Bearer {self.Token}', 'user-agent': self.UA, 'sec-ch-ua-platform': 'Android', 'origin': 'https://telegram.blum.codes', 'x-requested-with': 'org.telegram.plus', 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'ru,ru-RU;q=0.9,en-US;q=0.8,en;q=0.7'}

        try:
            HPV = get(URL, headers=Headers, proxies=self.Proxy).json()

            Balance = HPV['availableBalance'] # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            Plays = HPV['playPasses'] # –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª-–≤–æ –∏–≥—Ä

            return {'Balance': f'{float(Balance):,.0f}', 'Plays': Plays}
        except:
            return None



    def Daily_Reward(self) -> bool:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã'''

        URL = 'https://game-domain.blum.codes/api/v1/daily-reward?offset=-300'
        Headers = {'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'accept': 'application/json, text/plain, */*', 'sec-ch-ua-mobile': '?1', 'authorization': f'Bearer {self.Token}', 'user-agent': self.UA, 'sec-ch-ua-platform': '"Android"', 'origin': 'https://telegram.blum.codes', 'x-requested-with': 'org.telegram.plus', 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'ru,ru-RU;q=0.9,en-US;q=0.8,en;q=0.7'}

        try:
            HPV = post(URL, headers=Headers, proxies=self.Proxy)

            if HPV.text == 'OK':
                return True
            else:
                return False
        except:
            return False



    def Claim(self) -> None:
        '''–°–±–æ—Ä –º–æ–Ω–µ—Ç'''

        URL = 'https://game-domain.blum.codes/api/v1/farming/claim'
        Headers = {'Host': 'game-domain.blum.codes', 'Content-Length': '0', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'Accept': 'application/json, text/plain, */*', 'sec-ch-ua-mobile': '?1', 'Authorization': f'Bearer {self.Token}', 'User-Agent': self.UA, 'sec-ch-ua-platform': '"Android"', 'Origin': 'https://telegram.blum.codes', 'x-requested-with': 'org.telegram.plus', 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'}

        try:
            post(URL, headers=Headers, proxies=self.Proxy).json()['availableBalance']
            self.Logging('Success', self.Name, 'üü¢', '–ú–æ–Ω–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã!')
        except:
            self.Logging('Error', self.Name, 'üî¥', '–ú–æ–Ω–µ—Ç—ã –Ω–µ —Å–æ–±—Ä–∞–Ω—ã!')



    def Start_Farm(self) -> None:
        '''–ó–∞–ø—É—Å–∫ —Ñ–∞—Ä–º–∞ –º–æ–Ω–µ—Ç'''

        URL = 'https://game-domain.blum.codes/api/v1/farming/start'
        Headers = {'Host': 'game-domain.blum.codes', 'Content-Length': '0', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'Accept': 'application/json, text/plain, */*', 'sec-ch-ua-mobile': '?1', 'Authorization': f'Bearer {self.Token}', 'User-Agent': self.UA, 'sec-ch-ua-platform': '"Android"', 'Origin': 'https://telegram.blum.codes', 'x-requested-with': 'org.telegram.plus', 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'}

        try:
            HPV = post(URL, headers=Headers, proxies=self.Proxy)

            try:
                HPV.json()['startTime']
                self.Logging('Success', self.Name, 'üü¢', '–§–∞—Ä–º –º–æ–Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω!')
            except:
                self.Logging('Warning', self.Name, 'üü°', '–§–∞—Ä–º –º–æ–Ω–µ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!')
        except:
            self.Logging('Error', self.Name, 'üî¥', '–§–∞—Ä–º –º–æ–Ω–µ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω!')



    def Referal_Claim(self) -> bool:
        '''–°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'''

        URL = 'https://gateway.blum.codes/v1/friends/claim'
        Headers = {'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'Accept': 'application/json, text/plain, */*', 'sec-ch-ua-mobile': '?1', 'Authorization': f'Bearer {self.Token}', 'User-Agent': self.UA, 'sec-ch-ua-platform': '"Android"', 'Origin': 'https://telegram.blum.codes', 'x-requested-with': 'org.telegram.plus', 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'}

        try:
            post(URL, headers=Headers, proxies=self.Proxy).json()['claimBalance']
            return True
        except:
            return False



    def Play(self) -> None:
        '''–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã'''

        URL_1 = 'https://game-domain.blum.codes/api/v1/game/play'
        URL_2 = 'https://game-domain.blum.codes/api/v1/game/claim'
        Headers_1 = {'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'Accept': 'application/json, text/plain, */*', 'sec-ch-ua-mobile': '?1', 'Authorization': f'Bearer {self.Token}', 'User-Agent': self.UA, 'sec-ch-ua-platform': '"Android"', 'Origin': 'https://telegram.blum.codes', 'x-requested-with': 'org.telegram.plus', 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'}
        Headers_2 = {'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'Accept': 'application/json, text/plain, */*', 'Content-Type': 'application/json', 'sec-ch-ua-mobile': '?1', 'Authorization': f'Bearer {self.Token}', 'User-Agent': self.UA, 'sec-ch-ua-platform': '"Android"', 'Origin': 'https://telegram.blum.codes', 'x-requested-with': 'org.telegram.plus', 'sec-fetch-site': 'same-site', 'sec-fetch-mode': 'cors', 'sec-fetch-dest': 'empty', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'}

        try:
            GID = post(URL_1, headers=Headers_1, proxies=self.Proxy).json()['gameId'] # –ó–∞–ø—É—Å–∫ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ ID –∏–≥—Ä—ã
            _COINS = randint(COINS[0], COINS[1]) # –ñ–µ–ª–∞–µ–º–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç
            sleep(30) # –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥, –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã

            post(URL_2, headers=Headers_2, json={'gameId': str(GID), 'points': _COINS}, proxies=self.Proxy)
            self.Logging('Success', self.Name, 'üü¢', f'–ò–≥—Ä–∞ —Å—ã–≥—Ä–∞–Ω–∞! +{_COINS}!')
        except:
            self.Logging('Error', self.Name, 'üî¥', '–ò–≥—Ä–∞ –Ω–µ —Å—ã–≥—Ä–∞–Ω–∞!')



    def Get_Tasks(self) -> list:
        '''–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π'''

        URL = 'https://game-domain.blum.codes/api/v1/tasks'
        Headers = {'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'Accept': 'application/json, text/plain, */*', 'sec-ch-ua-mobile': '?1', 'Authorization': f'Bearer {self.Token}', 'User-Agent': self.UA, 'sec-ch-ua-platform': '"Android"', 'Origin': 'https://telegram.blum.codes', 'X-Requested-With': 'org.telegram.plus', 'Sec-Fetch-Site': 'same-site', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru,ru-RU;q=0.9,en-US;q=0.8,en;q=0.7'}

        try:
            return get(URL, headers=Headers, proxies=self.Proxy).json()
        except:
            return []



    def Start_Tasks(self, ID: str) -> bool:
        '''–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è'''

        URL = f'https://game-domain.blum.codes/api/v1/tasks/{ID}/start'
        Headers = {'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'Accept': 'application/json, text/plain, */*', 'sec-ch-ua-mobile': '?1', 'Authorization': f'Bearer {self.Token}', 'User-Agent': self.UA, 'sec-ch-ua-platform': '"Android"', 'Origin': 'https://telegram.blum.codes', 'X-Requested-With': 'org.telegram.plus', 'Sec-Fetch-Site': 'same-site', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru,ru-RU;q=0.9,en-US;q=0.8,en;q=0.7'}

        try:
            return True if post(URL, headers=Headers, proxies=self.Proxy).json()['STARTED'] else False
        except:
            return False



    def Claim_Tasks(self, ID: str) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ'''

        URL = f'https://game-domain.blum.codes/api/v1/tasks/{ID}/claim'
        Headers = {'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'Accept': 'application/json, text/plain, */*', 'sec-ch-ua-mobile': '?1', 'Authorization': f'Bearer {self.Token}', 'User-Agent': self.UA, 'sec-ch-ua-platform': '"Android"', 'Origin': 'https://telegram.blum.codes', 'X-Requested-With': 'org.telegram.plus', 'Sec-Fetch-Site': 'same-site', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru,ru-RU;q=0.9,en-US;q=0.8,en;q=0.7'}

        try:
            HPV = post(URL, headers=Headers, proxies=self.Proxy).json()

            Status = HPV['status'] # –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
            Reward = HPV['reward'] # –ù–∞–≥—Ä–∞–¥–∞

            if Status == 'FINISHED':
                return {'Status': True, 'Reward': Reward}
            else:
                return {'Status': False}
        except:
            return {'Status': False}



    def Run(self) -> None:
        '''–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞'''

        while True:
            try:
                if self.Token: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
                    self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.Get_Info()["Balance"]}')


                    if self.Daily_Reward(): # –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
                        self.Logging('Success', self.Name, 'üü¢', '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!')
                        sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    self.Claim() # –°–±–æ—Ä –º–æ–Ω–µ—Ç
                    sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                    self.Start_Farm() # –ó–∞–ø—É—Å–∫ —Ñ–∞—Ä–º–∞ –º–æ–Ω–µ—Ç
                    sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    if self.Referal_Claim(): # –°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                        self.Logging('Success', self.Name, 'üü¢', '–ú–æ–Ω–µ—Ç—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–æ–±—Ä–∞–Ω—ã!')
                        sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –∏ –∑–∞–ø—É—Å–∫ –∏—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
                    Get_plays = self.Get_Info()['Plays'] 
                    if Get_plays > 0:
                        self.Logging('Success', self.Name, 'üéÆ', f'–ò–≥—Ä –¥–æ—Å—Ç—É–ø–Ω–æ: {Get_plays}!')
                        for _ in range(Get_plays):
                            self.Play()
                            sleep(randint(12, 23))

                        self.Logging('Success', self.Name, 'üí∞', f'–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∏–≥—Ä: {self.Get_Info()["Balance"]}')



                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                    Tasks = self.Get_Tasks() # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
                    for Task in Tasks:

                        if Task['status'] == 'NOT_STARTED': # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–æ
                            if self.Start_Tasks(Task['id']):
                                sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                                Claim_Tasks = self.Claim_Tasks(Task['id'])
                                if Claim_Tasks['Status']:
                                    self.Logging('Success', self.Name, '‚ö°Ô∏è', f'–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +{Claim_Tasks["Reward"]}')
                                    sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                        elif Task['status'] == 'READY_FOR_CLAIM': # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞—Ç–æ
                            Claim_Tasks = self.Claim_Tasks(Task['id'])
                            if Claim_Tasks['Status']:
                                self.Logging('Success', self.Name, '‚ö°Ô∏è', f'–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +{Claim_Tasks["Reward"]}')
                                sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    Waiting = randint(29_000, 32_500) # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                    Waiting_STR = (datetime.now() + timedelta(seconds=Waiting)).strftime('%Y-%m-%d %H:%M:%S') # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ

                    self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.Get_Info()["Balance"]}')
                    self.Logging('Warning', self.Name, '‚è≥', f'–°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä: {Waiting_STR}!')

                    sleep(Waiting) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 8 –¥–æ 9 —á–∞—Å–æ–≤
                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

                else: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞
                    sleep(randint(33, 66)) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 33 –¥–æ 66 —Å–µ–∫—É–Ω–¥
                    self.ReAuthentication() # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            except:
                pass







if __name__ == '__main__':
    sys('cls') if s_name() == 'Windows' else sys('clear')

    Console_Lock = Lock()
    Proxy = HPV_Proxy_Checker()

    def Start_Thread(Account, URL, Proxy = None):
        Blum = HPV_Blum(Account, URL, Proxy)
        Blum.Run()

    if Proxy:
        DIVIDER = Fore.BLACK + ' | '
        Time = Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
        Text = Fore.GREEN + f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–µ: {len(Proxy)}'
        print(Time + DIVIDER + 'üåê' + DIVIDER + Text)
        sleep(5)

    try:
        for Account, URL in HPV_Get_Accounts().items():
            if Proxy:
                Proxy = cycle(Proxy)
                Thread(target=Start_Thread, args=(Account, URL, next(Proxy),)).start()
            else:
                Thread(target=Start_Thread, args=(Account, URL,)).start()
    except:
        print(Fore.RED + '\n\t–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è `HPV_Account.json`, —Å—Å—ã–ª–∫–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')


